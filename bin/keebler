#!/usr/bin/env nu

source ../data/keymap.nu

# Process all layers and keys into QMK keycodes.
def "build codes" [ctx: record] {
	let layers = $ctx
	| get layers
	| each {|layer|
		let codes = get keys
		| compact
		| each {|key|
			into string
			| main map $in
		}

		$layer | upsert codes $codes
	}
	$ctx | upsert layers $layers
}

# Generate QMK code for each layer.
def "build keymaps" [ctx: record] {
	let layers = $ctx
	| get layers
	| each {|layer|
		let keymap = $layer.codes
		| str join ", "
		| $"LAYOUT\(($in))"

		$layer
		| upsert id $"_($layer.name | str upcase)"
		| upsert keymap $keymap
	}
	$ctx | upsert layers $layers
}

# Generate QMK file.
def "build qmk" [ctx: record] {
	$ctx
	| to json
	| tera --stdin --template ./templates/keymap.c
	| save --force ./keymap.c
}

def main [] {
	open data/keebler.nuon
	| build codes $in
	| build keymaps $in
	| to json
}

# Map a key string into a QMK keycode.
def "main map" [
	key: string # key alias to map
	--fn (-f) # whether key is a function
] {
	let parts = $key | parse "{fn}[{args}]" | get -i 0

	if $fn and $"($key)_t" in $keymap {
		$keymap | get $"($key)_t"
	} else if $key in $keymap {
		$keymap | get $key
	} else if ($parts | is-not-empty) {
		let fn = main map $parts.fn --fn
		let args = $parts.args
		| split column ","
		| str trim
		| get 0
		| values
		| each {
			main map $in
		}
		| str join ", "
    $"($fn)\(($args))"
	} else if ($key | str starts-with '_') {
		$key | str upcase
	} else {
		"KC_" ++ $key | str upcase
	}
}

# Generate QMK file.
def "main build" [] {
	open data/keebler.nuon
	| build codes $in
	| build keymaps $in
	| build qmk $in
}
