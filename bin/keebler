#!/usr/bin/env -S nu --stdin

let keymap = open data/keymap.nuon

# Map a key string into a QMK keycode.
def "map string" [
	# in: string # key
	--fn (-f) # whether key is a function
] {
	let key = $in | str trim
	let parts = $key | parse "{fn}[{args}]" | get -i 0

	if $fn and $"($key)_t" in $keymap {
		$keymap | get $"($key)_t"
	} else if $key in $keymap {
		$keymap | get $key
	} else if ($parts | is-not-empty) {
		let fn = $parts.fn | map string --fn
		let args = $parts.args
		| split column -c ,
		| str trim
		| get 0
		| values
		| if ($in | is-empty) { [ ',' ] } else {}
		| map list
		| str join ", "
    $"($fn)\(($args))"
	} else if ($fn or ($key | str contains '_')) {
		$key | str upcase
	} else {
		"KC_" ++ $key | str upcase
	}
}

# Map all keys in a list.
def "map list" [
	# in: list[string] # keys
] {
	each { into string | map string }
}

# Map keys and values in a record.
def "map record" [
	# in: record # keys
] {
	items {|key, value|
		{ key: ($key | map), value: ($value | map) }
	}
}

# Map keys into QMK keycodes.
def map [
	# in: any # value
] {
	let value = $in
	match ($value | describe --detailed | get type) {
		list => { $value | map list }
		record => { $value | map record }
		string => { $value | map string }
	}
}

# Map keys into QMK keycodes.
def "main map" [
	# in: any # value
] {
	map
}

# Process all layers and keys into QMK keycodes.
def "build layers" [ctx: record] {
	$ctx | upsert layers (
		$ctx.layers | each {|layer|
			$layer
			| upsert id $"_($layer.name | str upcase)"
			| upsert keys_ ($layer.keys | compact | map)
			| upsert encoders_ {
				left: ($layer | get -i encoders.left | default [ "__", "__" ] | map)
				right: ($layer | get -i encoders.right | default [ "__", "__" ] | map)
			}
			| upsert keymap ($in.keys_ | str join ", " | $"LAYOUT\(($in))")
		}
	)
}

# Generate extra transformations.
def "build extra" [ctx: record] {
	$ctx
	| upsert keycodes_ ($ctx.keycodes | map)
	| upsert achordion_ ($ctx.achordion | map)
	| upsert shifts_ ($ctx.shifts | map)
}

# Generate QMK file.
def "build qmk" [ctx: record] {
	$ctx
	| to json
	| tera --stdin --template ./templates/keymap.c
	| save --force ./keymap.c
}

# Transform data.
def transform [] {
	open data/keebler.nuon
	| build layers $in
	| build extra $in
}

##

# Transform data into json.
def main [] {
	transform
	| to json
}

# Generate QMK file.
def "main build" [] {
	transform
	| build qmk $in
}

# Generate keymap.c.
def "main compile" [] {
	main build
	qmk compile -j 32 -kb sofle_pico -km ermak
}

# Flash QMK firmware.
def "main flash" [] {
	mount /dev/disk/by-label/RPI-RP2 /mnt/usb
	cp ~/qmk_firmware/sofle_pico_ermak.uf2 /mnt/usb
}

# Generate QMK file.
def "main watch compile" [] {
	watch . {|op, path|
		if $path in (glob "{bin,data,templates}/*") {
			echo $"\n(date now | format date "%T"): Compiling board..."
			main compile
		}
	}
}

# Generate QMK file.
def "main watch flash" [] {
	watch /dev/disk/by-label {|op, path|
		if ($op == "Create" and ($path | str ends-with "/RPI-RP2")) {
			echo $"(date now | format date "%T"): Flashing board..."
			main flash
		}
	}
}
