#!/usr/bin/env -S nu --stdin

source ../data/keymap.nu

# Map a key string into a QMK keycode.
def map [
	# in: string # key
	--fn (-f) # whether key is a function
] {
	let key = $in | str trim
	let parts = $key | parse "{fn}[{args}]" | get -i 0

	if $fn and $"($key)_t" in $keymap {
		$keymap | get $"($key)_t"
	} else if $key in $keymap {
		$keymap | get $key
	} else if ($parts | is-not-empty) {
		let fn = $parts.fn | map --fn
		let args = $parts.args
		| split column -c ,
		| str trim
		| get 0
		| values
		| if ($in | is-empty) { [ ',' ] } else {}
		| each {
			map
		}
		| str join ", "
    $"($fn)\(($args))"
	} else if ($fn or ($key | str contains '_')) {
		$key | str upcase
	} else {
		"KC_" ++ $key | str upcase
	}
}

# Process all layers and keys into QMK keycodes.
def "build codes" [ctx: record] {
	let layers = $ctx
	| get layers
	| each {|layer|
		let codes = get keys
		| compact
		| each {|key|
			into string
			| map
		}

		$layer | upsert codes $codes
	}
	$ctx | upsert layers $layers
}

# Generate QMK code for each layer.
def "build keymaps" [ctx: record] {
	$ctx | upsert layers ($ctx
		| get layers
		| each {|layer|
			let keymap = $layer.codes
			| str join ", "
			| $"LAYOUT\(($in))"

			$layer
			| upsert id $"_($layer.name | str upcase)"
			| upsert keymap $keymap
		})
}

# Generate custom transformations.
def "build custom" [ctx: record] {
	let custom = $ctx.custom
	$ctx | upsert custom.mapped {
		keycodes: ($custom.keycodes | each {|kc| map })
		shifts: (
			$custom.shifts
			| items {|low, high|
				{ low: ($low | map), high: ($high | map) }
			}
		)
	}
}

# Generate QMK file.
def "build qmk" [ctx: record] {
	$ctx
	| to json
	| tera --stdin --template ./templates/keymap.c
	| save --force ./keymap.c
}

# Transform data.
def transform [] {
	open data/keebler.nuon
	| build codes $in
	| build keymaps $in
	| build custom $in
}

##

# Transform data into json.
def main [] {
	transform
	| to json
}

# Map a key string into a QMK keycode.
def "main map" [
	# in: string # key
	--fn (-f) # whether key is a function
] {
	if $fn { map --fn } else { map }
}

# Generate QMK file.
def "main build" [] {
	transform
	| build qmk $in
}

# Generate keymap.c.
def "main compile" [] {
	main build
	qmk compile -j 32 -kb sofle_pico -km ermak
}

# Flash QMK firmware.
def "main flash" [] {
	mount /dev/disk/by-label/RPI-RP2 /mnt/usb
	cp ~/qmk_firmware/sofle_pico_ermak.uf2 /mnt/usb
}

# Generate QMK file.
def "main watch compile" [] {
	watch . {|op, path|
		if $path in (glob "{bin,data,templates}/*") {
			echo $"\n(date now | format date "%T"): Compiling board..."
			main compile
		}
	}
}

# Generate QMK file.
def "main watch flash" [] {
	watch /dev/disk/by-label {|op, path|
		if ($op == "Create" and ($path | str ends-with "/RPI-RP2")) {
			echo $"(date now | format date "%T"): Flashing board..."
			main flash
		}
	}
}
